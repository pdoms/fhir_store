use core::panic;

use indexmap::map::IndexMap;
use super::datatype::{StoreId, DT, DTR, ToStoreWith};
use crate::data::datatype::get_expects;
use crate::error::{Result, Error};
use crate::store::writer::PAGE_SIZE;

#[derive(Clone, Debug)]
pub struct Tree {
    map: IndexMap<StoreId, DTR>
}

struct TreeReader {
    inner: *mut u8,
    len: usize,
    cursor: usize,
    target_lengths: Vec<usize>,
    key: Option<StoreId>,
    tree: Tree,
}


impl TreeReader {
    fn from_raw(inner: *mut u8, len: usize) -> Self {
        Self {
            inner,
            len,
            cursor: 0,
            target_lengths: Vec::new(),
            key: None,
            tree: Tree::new()
        }
    }

    fn check_read(&self, adv: usize) -> Result<()> {
        if (self.cursor + adv) > PAGE_SIZE {
            return Err(Error::SegmentationFault);
        }
        Ok(())
    }

    fn is_done(&self) -> bool {
        self.cursor == self.len
    }
    pub fn peek_u16(&self) -> Result<u16> {
        self.check_read(2)?;
        let bytes = unsafe {
             &*std::ptr::slice_from_raw_parts(self.inner.add(self.cursor), 2)
        };
        match bytes.try_into() {
            Ok(s) => Ok(u16::from_be_bytes(s)),
            Err(err) => Err(Error::Custom(err.to_string()))
        }
    }
 
    pub fn read_u16(&mut self) -> Result<u16> {
        self.check_read(2)?;
        let bytes = unsafe {
             &*std::ptr::slice_from_raw_parts(self.inner.add(self.cursor), 2)
        };
        self.cursor += 2;
        match bytes.try_into() {
            Ok(s) => Ok(u16::from_be_bytes(s)),
            Err(err) => Err(Error::Custom(err.to_string()))
        }
    }

    pub fn read_n(&mut self, n: usize) -> Result<Vec<u8>> {
        self.check_read(n)?;
        let bytes = unsafe {
             &*std::ptr::slice_from_raw_parts(self.inner.add(self.cursor), n)
        };
        self.cursor += n;
        Ok(bytes.to_vec())
    }


    

    fn read_unit(&mut self, tree: &mut Tree) -> Tree {
        if self.is_done() {
            return tree.clone();
        }
        if let Ok(len) = self.read_u16() {
            println!("LENGTH: {len}");
            self.target_lengths.push(len as usize);
            if let Ok(num) = self.read_u16() {
                println!("AS NUM: {num}");
                if let Ok(id) = StoreId::try_from(num) {
                    println!("FOUND ID: {id:?}");
                    if id.is_primitive() {
                        if self.handle_primitive(len as usize, id, tree).is_ok() {
                            return self.read_unit(tree) 
                        } 
                    } else if id.is_general_purpose() {
                        panic!("GP {:?}", id)
                    } else {
                        if let Some(exp) = get_expects(id as u16) {
                            if exp.is_primitive() {
                                self.key = Some(id);
                                self.read_unit(tree);
                            } else {
                                self.key = Some(id);
                                println!("Non primitive expects: {exp:?}");
                                let dtr = DTR::from_store_with_tree(exp as u16, self.read_unit(&mut Tree::new())).unwrap();
                                tree.insert(id, dtr);
                                self.read_unit(tree);
                            }
                        };
                    }
                }
            }
        };
        tree.clone()
    }
    
    fn handle_primitive(&mut self, len: usize, id: StoreId, tree: &mut Tree) -> Result<()> {
        println!("CURSOR AT: {} of {}", self.cursor, self.len);
        if let Some(k) = self.key {
            println!("is key");
            let dtr = DTR::from_store(id as u16, &mut self.read_n(len)?)?;
            tree.insert(k.clone(), dtr);
            self.key = None;
            Ok(())
        } else {
            println!("is not a key");
            let dtr = DTR::from_store(id.clone() as u16, &mut self.read_n(len)?)?;
            tree.insert(id, dtr);
            Ok(())
        }
    }

}


impl Tree {
    fn new() -> Self {
        Self { map: IndexMap::new() }
    }

    fn insert(&mut self, k: StoreId, v: DTR) {
        self.map.insert(k, v);
    }
}

fn deserialize(data: &mut [u8]) {
    let mut reader = TreeReader::from_raw(data.as_mut_ptr(), data.len());
    let mut tree = Tree::new();
    reader.read_unit(&mut tree);
    println!("FINAL TREE: {:?}", tree);
}

fn pop_n_subtract(lengths: &mut Vec<usize>) {
    if let Some(val) = lengths.pop() {
        if let Some(last) = lengths.last_mut() {
            *last -= val;
        }
    };
}

fn decrease_last(lengths: &mut Vec<usize>, val: usize) {
    if let Some(last) = lengths.last_mut() {
        *last -= val;
    }
}




#[cfg(test)]
mod test {
    use super::*;


    #[test]
    fn create_tree() {
        //let mut data = vec![0, 38, 1, 1, 0, 7, 0, 14, 80, 97, 116, 105, 101, 110, 116, 0, 2, 1, 2, 0, 4, 0, 8, 97, 110, 105, 100, 0, 2, 1, 3, 0, 1, 0, 2, 1];
        //deserialize(&mut data);
        let mut data_more = vec![6, 174, 1, 1, 0, 7, 0, 14, 80, 97, 116, 105, 101, 110, 116, 0, 2, 1, 2, 0, 4, 0, 8, 97, 110, 105, 100, 0, 2, 1, 3, 0, 1, 0, 2, 1, 0, 2, 1, 6, 6, 132, 1, 7, 0, 9, 0, 14, 103, 101, 110, 101, 114, 97, 116, 101, 100, 0, 2, 1, 8, 6, 65, 0, 14, 60, 100, 105, 118, 32, 120, 109, 108, 110, 115, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57, 47, 120, 104, 116, 109, 108, 34, 62, 60, 112, 32, 115, 116, 121, 108, 101, 61, 34, 98, 111, 114, 100, 101, 114, 58, 32, 49, 112, 120, 32, 35, 54, 54, 49, 97, 102, 102, 32, 115, 111, 108, 105, 100, 59, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 101, 54, 101, 54, 102, 102, 59, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 49, 48, 112, 120, 59, 34, 62, 60, 98, 62, 74, 105, 109, 32, 60, 47, 98, 62, 32, 109, 97, 108, 101, 44, 32, 68, 111, 66, 58, 32, 49, 57, 55, 52, 45, 49, 50, 45, 50, 53, 32, 40, 32, 77, 101, 100, 105, 99, 97, 108, 32, 114, 101, 99, 111, 114, 100, 32, 110, 117, 109, 98, 101, 114, 58, 32, 49, 50, 51, 52, 53, 92, 117, 48, 48, 97, 48, 40, 117, 115, 101, 58, 92, 117, 48, 48, 97, 48, 85, 83, 85, 65, 76, 44, 92, 117, 48, 48, 97, 48, 112, 101, 114, 105, 111, 100, 58, 92, 117, 48, 48, 97, 48, 50, 48, 48, 49, 45, 48, 53, 45, 48, 54, 32, 45, 45, 38, 103, 116, 59, 32, 40, 111, 110, 103, 111, 105, 110, 103, 41, 41, 41, 60, 47, 112, 62, 60, 104, 114, 47, 62, 60, 116, 97, 98, 108, 101, 32, 99, 108, 97, 115, 115, 61, 34, 103, 114, 105, 100, 34, 62, 60, 116, 114, 62, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 51, 102, 53, 100, 97, 34, 32, 116, 105, 116, 108, 101, 61, 34, 82, 101, 99, 111, 114, 100, 32, 105, 115, 32, 97, 99, 116, 105, 118, 101, 34, 62, 65, 99, 116, 105, 118, 101, 58, 60, 47, 116, 100, 62, 60, 116, 100, 62, 116, 114, 117, 101, 60, 47, 116, 100, 62, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 51, 102, 53, 100, 97, 34, 32, 116, 105, 116, 108, 101, 61, 34, 75, 110, 111, 119, 110, 32, 115, 116, 97, 116, 117, 115, 32, 111, 102, 32, 80, 97, 116, 105, 101, 110, 116, 34, 62, 68, 101, 99, 101, 97, 115, 101, 100, 58, 60, 47, 116, 100, 62, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 34, 51, 34, 62, 102, 97, 108, 115, 101, 60, 47, 116, 100, 62, 60, 47, 116, 114, 62, 60, 116, 114, 62, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 51, 102, 53, 100, 97, 34, 32, 116, 105, 116, 108, 101, 61, 34, 65, 108, 116, 101, 114, 110, 97, 116, 101, 32, 110, 97, 109, 101, 115, 32, 40, 115, 101, 101, 32, 116, 104, 101, 32, 111, 110, 101, 32, 97, 98, 111, 118, 101, 41, 34, 62, 65, 108, 116, 32, 78, 97, 109, 101, 115, 58, 60, 47, 116, 100, 62, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 34, 51, 34, 62, 60, 117, 108, 62, 60, 108, 105, 62, 80, 101, 116, 101, 114, 32, 74, 97, 109, 101, 115, 32, 67, 104, 97, 108, 109, 101, 114, 115, 32, 40, 79, 70, 70, 73, 67, 73, 65, 76, 41, 60, 47, 108, 105, 62, 60, 108, 105, 62, 80, 101, 116, 101, 114, 32, 74, 97, 109, 101, 115, 32, 87, 105, 110, 100, 115, 111, 114, 32, 40, 77, 65, 73, 68, 69, 78, 41, 60, 47, 108, 105, 62, 60, 47, 117, 108, 62, 60, 47, 116, 100, 62, 60, 47, 116, 114, 62, 60, 116, 114, 62, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 51, 102, 53, 100, 97, 34, 32, 116, 105, 116, 108, 101, 61, 34, 87, 97, 121, 115, 32, 116, 111, 32, 99, 111, 110, 116, 97, 99, 116, 32, 116, 104, 101, 32, 80, 97, 116, 105, 101, 110, 116, 34, 62, 67, 111, 110, 116, 97, 99, 116, 32, 68, 101, 116, 97, 105, 108, 115, 58, 60, 47, 116, 100, 62, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 34, 51, 34, 62, 60, 117, 108, 62, 60, 108, 105, 62, 45, 117, 110, 107, 110, 111, 119, 110, 45, 40, 72, 79, 77, 69, 41, 60, 47, 108, 105, 62, 60, 108, 105, 62, 112, 104, 58, 32, 40, 48, 51, 41, 32, 53, 53, 53, 53, 32, 54, 52, 55, 51, 40, 87, 79, 82, 75, 41, 60, 47, 108, 105, 62, 60, 108, 105, 62, 112, 104, 58, 32, 40, 48, 51, 41, 32, 51, 52, 49, 48, 32, 53, 54, 49, 51, 40, 77, 79, 66, 73, 76, 69, 41, 60, 47, 108, 105, 62, 60, 108, 105, 62, 112, 104, 58, 32, 40, 48, 51, 41, 32, 53, 53, 53, 53, 32, 56, 56, 51, 52, 40, 79, 76, 68, 41, 60, 47, 108, 105, 62, 60, 108, 105, 62, 53, 51, 52, 32, 69, 114, 101, 119, 104, 111, 110, 32, 83, 116, 32, 80, 101, 97, 115, 97, 110, 116, 86, 105, 108, 108, 101, 44, 32, 82, 97, 105, 110, 98, 111, 119, 44, 32, 86, 105, 99, 32, 32, 51, 57, 57, 57, 40, 72, 79, 77, 69, 41, 60, 47, 108, 105, 62, 60, 47, 117, 108, 62, 60, 47, 116, 100, 62, 60, 47, 116, 114, 62, 60, 116, 114, 62, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 51, 102, 53, 100, 97, 34, 32, 116, 105, 116, 108, 101, 61, 34, 78, 111, 109, 105, 110, 97, 116, 101, 100, 32, 67, 111, 110, 116, 97, 99, 116, 58, 32, 78, 101, 120, 116, 45, 111, 102, 45, 75, 105, 110, 34, 62, 78, 101, 120, 116, 45, 111, 102, 45, 75, 105, 110, 58, 60, 47, 116, 100, 62, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 34, 51, 34, 62, 60, 117, 108, 62, 60, 108, 105, 62, 66, 195, 169, 110, 195, 169, 100, 105, 99, 116, 101, 32, 100, 117, 32, 77, 97, 114, 99, 104, 195, 169, 32, 32, 40, 102, 101, 109, 97, 108, 101, 41, 60, 47, 108, 105, 62, 60, 108, 105, 62, 53, 51, 52, 32, 69, 114, 101, 119, 104, 111, 110, 32, 83, 116, 32, 80, 108, 101, 97, 115, 97, 110, 116, 86, 105, 108, 108, 101, 32, 86, 105, 99, 32, 51, 57, 57, 57, 32, 40, 72, 79, 77, 69, 41, 60, 47, 108, 105, 62, 60, 108, 105, 62, 60, 97, 32, 104, 114, 101, 102, 61, 34, 116, 101, 108, 58, 43, 51, 51, 40, 50, 51, 55, 41, 57, 57, 56, 51, 50, 55, 34, 62, 43, 51, 51, 32, 40, 50, 51, 55, 41, 32, 57, 57, 56, 51, 50, 55, 60, 47, 97, 62, 60, 47, 108, 105, 62, 60, 108, 105, 62, 86, 97, 108, 105, 100, 32, 80, 101, 114, 105, 111, 100, 58, 32, 50, 48, 49, 50, 32, 45, 45, 38, 103, 116, 59, 32, 40, 111, 110, 103, 111, 105, 110, 103, 41, 60, 47, 108, 105, 62, 60, 47, 117, 108, 62, 60, 47, 116, 100, 62, 60, 47, 116, 114, 62, 60, 116, 114, 62, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 32, 35, 102, 51, 102, 53, 100, 97, 34, 32, 116, 105, 116, 108, 101, 61, 34, 80, 97, 116, 105, 101, 110, 116, 32, 76, 105, 110, 107, 115, 34, 62, 76, 105, 110, 107, 115, 58, 60, 47, 116, 100, 62, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 34, 51, 34, 62, 60, 117, 108, 62, 60, 108, 105, 62, 77, 97, 110, 97, 103, 105, 110, 103, 32, 79, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 58, 32, 60, 97, 32, 104, 114, 101, 102, 61, 34, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 45, 101, 120, 97, 109, 112, 108, 101, 45, 103, 97, 115, 116, 114, 111, 46, 104, 116, 109, 108, 34, 62, 79, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 47, 49, 60, 47, 97, 62, 32, 38, 113, 117, 111, 116, 59, 71, 97, 115, 116, 114, 111, 101, 110, 116, 101, 114, 111, 108, 111, 103, 121, 38, 113, 117, 111, 116, 59, 60, 47, 108, 105, 62, 60, 47, 117, 108, 62, 60, 47, 116, 100, 62, 60, 47, 116, 114, 62, 60, 47, 116, 97, 98, 108, 101, 62, 60, 47, 100, 105, 118, 62];
        deserialize(&mut data_more);
    }

    #[test]
    fn lengths() {
        let mut lengths: Vec<usize> = vec![25, 7];
        pop_n_subtract(&mut lengths);
        assert_eq!(lengths, vec![18]);
        decrease_last(&mut lengths, 2);
        assert_eq!(lengths, vec![16]);

    }
    
}
